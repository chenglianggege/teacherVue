<template>
  <el-container v-loading.fullscreen.body.lock="fullscreenLoading">
    <el-header height="80px" class="header">
      <layoutHeader :activeIndex="activeIndex"></layoutHeader>
    </el-header>
    <el-main  class="container"  v-if="fullscreenLoading"></el-main>
    <el-main  class="container"  v-if="!fullscreenLoading">
      <div class="c-body">
        <div class="detail-title">
          <router-link :to="{path:'/teacher/classList'}" class="a-for-back">班级管理</router-link>
          <span class="icon-for-back"></span>
          <span class="mr13"><span class="grade">{{classDetail.class_name}}</span>（<span>{{classDetail.class_year}}</span>）</span>
          <div class="detail-sel-box fr">
            <div class="detail-sel" @click="dialogEditClassFormVisible = true">
              <span class="icon-edit"></span>
              <span class="blue">编辑班级</span>
            </div>
            <div class="detail-sel" @click="delClass">
              <span class="icon-can"></span>
              <span class="red">删除班级</span>
            </div>
          </div>
          <el-dialog title="编辑班级" width="35%" :visible.sync="dialogEditClassFormVisible">
            <el-form :model="editClassForm" label-width="100px">
              <el-form-item label="班级名称">
                <el-input v-model="editClassForm.class_name" auto-complete="off"></el-input>
              </el-form-item>
              <el-form-item label="班级年度" >
                <el-radio-group v-model="editClassForm.year" size="small">
                  <el-radio-button v-for="(year, index) in years"  :key="index" :label="year"></el-radio-button>
                </el-radio-group>
              </el-form-item>
              <el-form-item label="班级年级" >
                <el-select v-model="editClassForm.grade" placeholder="请选择">
                  <el-option
                    v-for="item in grades.grades_list"
                    :key="item.grade_id"
                    :label="item.grade_name"
                    :value="item.grade_id">
                  </el-option>
                </el-select>
              </el-form-item>
            </el-form>
            <div slot="footer" class="dialog-footer">
              <el-button @click="dialogEditClassFormVisible = false">取 消</el-button>
              <el-button type="primary" @click="saveClass">确 定</el-button>
            </div>
          </el-dialog>
        </div>
        <div class="chart-div">
          <div class="chart-box fl">
            <chart style="height: 250px; width: 470px"
              :options="homeworkComplete"
              :init-options="initOptions"
              ref="homeworkComplete"
              auto-resize
            />
            <div class="chart-title">班级作业完成度（<span>{{(classDetail.homework_info.complete_rate*100).toFixed(2)}}</span>%）</div>
          </div>

          <div class="chart-box fr">
            <chart style="height: 250px; width: 470px"
                   :options="distribution"
                   :init-options="initOptions"
                   ref="distribution"
                   auto-resize
            />
            <div class="chart-title">班级得分率（<span>{{(classDetail.homework_info.score_rate*100).toFixed(2)}}</span>%）</div>
          </div>
        </div>
        <div class="table-div">
          <div class="table-title">
            <span>{{classDetail.class_name}} 共{{classDetail.students.length}}人</span>
          </div>
          <div class="the-table">
            <el-table size="medium" :data="classDetail.students" style="width: 100%;padding-left: 22px">
              <el-table-column show-overflow-tooltip label="学号" width="100">
                <template slot-scope="scope">
                  {{scope.row.student_no ? scope.row.student_no : '--'}}
                </template>
              </el-table-column>
              <el-table-column label="照片" width="60">
                <template slot-scope="scope">
                  <img :src="scope.row.user_avatar ? PIC_STATIC + scope.row.user_avatar : default_stu_avatar"/>
                </template>
              </el-table-column>
              <el-table-column prop="student_name" label="姓名"></el-table-column>
              <el-table-column prop="student_phone" label="登录电话"></el-table-column>
              <el-table-column label="作业完成度">
                <template slot-scope="scope">
                  {{(+scope.row.complete_rate).toFixed(2)}}%
                </template>
              </el-table-column>
              <el-table-column label="作业得分率">
                <template slot-scope="scope">
                  {{(+scope.row.score_rate).toFixed(2)}}%
                </template>
              </el-table-column>
              <el-table-column label="学习卡状态">
                <template slot-scope="scope">
                  <span :class="scope.row.expire_status == 1 ? 'black' : 'red'">{{scope.row.expire_status == 0 ?(!scope.row.expire_time ? '未绑定' : '已过期') : '正常'}}</span>
                </template>
              </el-table-column>
              <el-table-column width="180" label="操作">
                <template slot-scope="scope">
                  <a href="javascript:void(0)" @click="removeStudent(scope.row)">移除学生</a> &nbsp;&nbsp;
                  <a href="javascript:void(0)" @click="editStudent(scope.row)">修改信息</a>
                </template>
              </el-table-column>
            </el-table>
            <el-dialog title="编辑学生" width="30%" :visible.sync="dialogEditStudentFormVisible">
              <el-form :model="editStudentForm" label-width="100px">
                <el-form-item label="学生姓名">
                  <el-input maxlength="11" v-model="editStudentForm.student_name" auto-complete="off"></el-input>
                </el-form-item>
                <el-form-item label="学生学号" >
                  <el-input v-model="editStudentForm.student_no" auto-complete="off"></el-input>
                </el-form-item>
              </el-form>
              <div slot="footer" class="dialog-footer">
                <el-button @click="dialogEditStudentFormVisible = false">取 消</el-button>
                <el-button type="primary" @click="saveStudent">确 定</el-button>
              </div>
            </el-dialog>
          </div>
        </div>
      </div>
    </el-main>
    <el-footer height="100px" class="footer">
      <layout-footer></layout-footer>
    </el-footer>
  </el-container>
</template>

<script>
import layoutHeader from '@/components/common/layoutHeader'
import layoutFooter from '@/components/common/layoutFooter'
import axios from 'axios'
// import ECharts from 'vue-echarts/components/ECharts.vue'
import ECharts from 'vue-echarts'
import 'echarts/lib/chart/bar'
import 'echarts/lib/chart/pie'
import 'echarts/lib/component/tooltip'
import 'echarts/lib/component/title'
import defaultStuAvatar from '@/assets/images/df_student.png'
export default {
  name: 'classDetail',
  components: {
    layoutHeader, layoutFooter, chart: ECharts
  },
  methods: {
    removeStudent (student) {
      let token = localStorage.getItem('token')
      let _this = this
      this.$confirm('是否确认删除学生' + student.student_name + '?', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then(() => {
        axios.post(window.API_URL + '/v2/teacher/sclass/remove', {class_id: _this.classDetail.class_id, student_id: student.student_id}, {params: {token: token}}).then(function (ret) {
          if (ret.data.retCode === 0) {
            _this.initClassInfo()
            _this.$message({
              type: 'success',
              message: '删除成功!'
            })
          }
        })
      })
    },
    editStudent (student) {
      this.dialogEditStudentFormVisible = true
      this.editStudentForm = {
        student_id: student.student_id,
        student_no: student.student_no,
        parents_phone: student.parents_phone,
        student_name: student.student_name
      }
    },
    saveStudent () {
      let token = localStorage.getItem('token')
      let _this = this
      axios.post(window.API_URL + '/v2/teacher/sclass/edit-student',
        this.editStudentForm,
        {params: {token: token}}).then(function (ret) {
        if (ret.data.retCode === 0) {
          _this.dialogEditStudentFormVisible = false
          _this.initClassInfo()
          _this.$message({
            type: 'success',
            message: '修改成功!'
          })
        }
      })
    },
    saveClass () {
      let token = localStorage.getItem('token')
      let _this = this
      axios.post(window.API_URL + '/v2/teacher/sclass/save',
        this.editClassForm,
        {params: {token: token}}).then(function (ret) {
        if (ret.data.retCode === 0) {
          _this.dialogEditClassFormVisible = false
          _this.initClassInfo()
          _this.$message({
            type: 'success',
            message: '修改成功!'
          })
        }
      })
    },
    delClass () {
      let token = localStorage.getItem('token')
      let _this = this
      this.$confirm('是否确认删除此班级?', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then(() => {
        axios.post(window.API_URL + '/v2/teacher/sclass/del', {class_id: _this.classDetail.class_id}, {params: {token: token}}).then(function (ret) {
          if (ret.data.retCode === 0) {
            return _this.$router.push('/teacher/classList')
          }
        })
      })
    },
    async initClassInfo () {
      let token = localStorage.getItem('token')
      let classId = this.$route.query.class_id
      if (!classId) {
        return this.$router.push('/')
      }
      this.fullscreenLoading = true
      try {
        let classDetail = await axios.get(window.API_URL + '/v2/teacher/sclass/detail', {params: {token: token, class_id: classId}})
        if (classDetail.data.retCode === 0) {
          this.classDetail = classDetail.data.retData
          this.editClassForm = {
            class_name: this.classDetail.class_name,
            year: this.classDetail.class_year,
            grade: Number(this.classDetail.grade_id),
            class_id: this.classDetail.class_id
          }
          this.homeworkComplete.series[0].data = [
            {value: parseInt(this.classDetail.homework_info.total_count - this.classDetail.homework_info.complete_count) + 0, name: '未完成人次'},
            {value: parseInt(+this.classDetail.homework_info.complete_count), name: '已完成人次'}
          ]
          this.distribution.series[0].data = Object.values(this.classDetail.homework_info.distribution)
        }
        let grades = await axios.get(window.API_URL + '/v2/teacher/paper/grades', {params: {token: token}})
        if (grades.data.retCode === 0) {
          this.grades = grades.data.retData
        }
      } catch (e) {
        console.log(e)
      } finally {
        this.fullscreenLoading = false
      }
    }
  },
  data () {
    return {
      PIC_STATIC: window.PIC_STATIC,
      activeIndex: '4',
      fullscreenLoading: true,
      classDetail: {},
      default_stu_avatar: defaultStuAvatar,
      dialogEditStudentFormVisible: false,
      dialogEditClassFormVisible: false,
      editStudentForm: {},
      editClassForm: {},
      grades: {},
      homeworkComplete: {
        title: {show: false},
        tooltip: {
          trigger: 'item',
          formatter: '{a} <br/>{b} : {c} ({d}%)'
        },
        legend: {
          orient: 'vertical',
          left: 'left',
          data: ['未完成人次', '已完成人次']
        },
        color: ['#58aff6', '#ffba3f'],
        series: [
          {
            name: '班级作业完成度',
            type: 'pie',
            radius: ['40%', '80%'],
            data: [
              {value: 0, name: '未完成人次'},
              {value: 0, name: '已完成人次'}
            ]
          }
        ]
      },
      distribution: {
        tooltip: {
          trigger: 'axis',
          axisPointer: {
            type: 'shadow'
          }
        },
        color: ['#58aff6'],
        grid: {
          left: '3%',
          right: '4%',
          bottom: '3%',
          top: '1%',
          containLabel: true
        },
        xAxis: [
          {
            type: 'category',
            data: ['0~20%', '20%~40%', '40~60%', '60~80%', '80~100%'],
            axisTick: {
              alignWithLabel: true
            }
          }
        ],
        yAxis: [
          {
            type: 'value'
          }
        ],
        series: [
          {
            name: '人数',
            type: 'bar',
            barWidth: '60%',
            data: []
          }
        ]
      },
      initOptions: {
        renderer: 'canvas'
      },
      years: []
    }
  },
  created () {
    this.userInfo = JSON.parse(localStorage.getItem('userInfo'))
    this.initClassInfo()
    let year = new Date().getFullYear()
    this.years.push((year - 1) + '~' + year)
    this.years.push(year + '~' + (year + 1))
  }
}
</script>

<style scoped>

  .detail-title {
    margin-top: 15px;
    height: 53px;
    line-height: 53px;
    font-size: 20px;
    color: #555;
  }

  .detail-sel-box {
    width: 222px;
    height: 100%;
    line-height: 53px;
  }
  .detail-sel {
    display: inline-block;
    padding-left: 11px;
    padding-right: 16px;
    font-size: 14px;
    cursor: pointer;
  }
  .chart-div {
    width: 1040px;
    height: 397px;
    margin: 0 auto;
    background: #fff;
    padding-top: 52px;
    margin-bottom: 20px;
  }
  .chart-box {
    width: 470px;
    font-size: 14px;
    position: relative;
    margin-top: 20px;
  }
  .chart-title {
    width: 100%;
    line-height: 53px;
    height: 53px;
    color: #656565;
    text-align: center;
  }
  .table-div {
    width: 1040px;
    margin: 0 auto;
    padding-bottom: 11px;
    background: #fff;
    padding-left: 25px;
    padding-right: 25px;
  }
  .table-title {
    height: 63px;
    line-height: 63px;
    font-size: 14px;
    color: #555;
  }
  .table-div img {
    height: 40px;
    width: 40px;
    border-radius: 40px;
    position: relative;
  }
</style>
